{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nexport const usePeopleFetch = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    fetchUsers().then(usrs => fetchCountries(usrs));\n  }, []);\n  useEffect(() => {\n    fetchCountries(users);\n  }, []);\n\n  async function fetchUsers() {\n    setIsLoading(true);\n    const response = await axios.get(`https://randomuser.me/api/?results=25&page=1`);\n    setUsers(response.data.results);\n    return response.data.results;\n  }\n\n  async function fetchCountries(usrs) {\n    console.log(users);\n    let c = {};\n    let cArr = [];\n\n    for (let i = 0; i < usrs.length; i++) {\n      if (!c[usrs[i].location.country]) {\n        c[usrs[i].location.country] = 1;\n        cArr.push({\n          [usrs[i].location.country]: usrs[i].location.country\n        });\n      }\n    }\n\n    setCountries(cArr);\n    console.log(countries);\n    setIsLoading(false);\n  }\n\n  return {\n    users,\n    isLoading,\n    fetchUsers,\n    countries,\n    fetchCountries\n  };\n};\n\n_s(usePeopleFetch, \"PvgzbwOMIb02QWKvA2goPTXifUY=\");","map":{"version":3,"sources":["/home/gal/vsc/PplFinder/src/hooks/usePeopleFetch.js"],"names":["useState","useEffect","axios","usePeopleFetch","users","setUsers","isLoading","setIsLoading","countries","setCountries","fetchUsers","then","usrs","fetchCountries","response","get","data","results","console","log","c","cArr","i","length","location","country","push"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,GAAGC,IAAb,CAAmBC,IAAD,IAAUC,cAAc,CAACD,IAAD,CAA1C;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc,CAACT,KAAD,CAAd;AACH,GAFU,EAER,EAFQ,CAAT;;AAIA,iBAAeM,UAAf,GAA4B;AAC1BH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,8CAAX,CAAvB;AACAV,IAAAA,QAAQ,CAACS,QAAQ,CAACE,IAAT,CAAcC,OAAf,CAAR;AACA,WAAOH,QAAQ,CAACE,IAAT,CAAcC,OAArB;AACD;;AAED,iBAAeJ,cAAf,CAA8BD,IAA9B,EAAmC;AACjCM,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACD,QAAIgB,CAAC,GAAG,EAAR;AACE,QAAIC,IAAI,GAAG,EAAX;;AACE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAI,CAACF,CAAC,CAACR,IAAI,CAACU,CAAD,CAAJ,CAAQE,QAAR,CAAiBC,OAAlB,CAAN,EAAkC;AAChCL,QAAAA,CAAC,CAACR,IAAI,CAACU,CAAD,CAAJ,CAAQE,QAAR,CAAiBC,OAAlB,CAAD,GAA8B,CAA9B;AACAJ,QAAAA,IAAI,CAACK,IAAL,CAAU;AAAC,WAACd,IAAI,CAACU,CAAD,CAAJ,CAAQE,QAAR,CAAiBC,OAAlB,GAA4Bb,IAAI,CAACU,CAAD,CAAJ,CAAQE,QAAR,CAAiBC;AAA9C,SAAV;AACD;AACJ;;AACDhB,IAAAA,YAAY,CAACY,IAAD,CAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACAD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAEF,SAAO;AAAEH,IAAAA,KAAF;AAASE,IAAAA,SAAT;AAAoBI,IAAAA,UAApB;AAAgCF,IAAAA,SAAhC;AAA2CK,IAAAA;AAA3C,GAAP;AACD,CApCM;;GAAMV,c","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport const usePeopleFetch = () => {\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    fetchUsers().then((usrs) => fetchCountries(usrs));\n  }, []);\n\n  useEffect(() => {\n    fetchCountries(users); \n}, []);\n\n  async function fetchUsers() {\n    setIsLoading(true);\n    const response = await axios.get(`https://randomuser.me/api/?results=25&page=1`);\n    setUsers(response.data.results);\n    return response.data.results\n  }\n\n  async function fetchCountries(usrs){\n    console.log(users)\n   let c = {};\n     let cArr = [];\n       for (let i = 0; i < usrs.length; i++) {\n         if (!c[usrs[i].location.country]) {\n           c[usrs[i].location.country] = 1;\n           cArr.push({[usrs[i].location.country]: usrs[i].location.country})\n         }\n     }\n     setCountries(cArr);\n     console.log(countries);\n     setIsLoading(false);\n   }\n\n  return { users, isLoading, fetchUsers ,countries, fetchCountries };\n};\n"]},"metadata":{},"sourceType":"module"}